openapi: 3.0.3
info:
  title: Homeport Backend API (Detailed)
  version: 0.2.0
servers:
  - url: http://localhost:5055
security:
  - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiOk:
      type: object
      properties: { success: { type: boolean, const: true }, data: {}, requestId: { type: string }, ts: { type: number } }
    ApiError:
      type: object
      properties: { success: { type: boolean, const: false }, error: { type: object, properties: { code: { type: string }, message: { type: string }, details: {} } }, requestId: { type: string }, ts: { type: number } }
    Company: { type: object, properties: { id: { type: string }, name: { type: string } } }
    Workspace: { type: object, properties: { id: { type: string }, name: { type: string }, templatesAllowed: { type: array, items: { type: string } } } }
    Provider: { type: object, properties: { key: { type: string }, name: { type: string }, categories: { type: array, items: { type: string } }, enabled: { type: boolean } } }
    NodeTemplate:
      type: object
      properties:
        key: { type: string }
        name: { type: string }
        type: { type: string, enum: [start,function,condition,loop,end,flow] }
        category: { type: string }
        args: {}
        output: { type: array, items: { type: string } }
        authorize_catch_error: { type: boolean }
        authorize_skip_error: { type: boolean }
    App: { type: object, properties: { id: { type: string }, name: { type: string }, providerId: { type: string }, workspaceId: { type: string }, config: {} } }
    CredentialSummary: { type: object, properties: { id: { type: string }, name: { type: string }, providerKey: { type: string }, workspaceId: { type: string } } }
    CredentialCreate: { type: object, properties: { name: { type: string }, providerKey: { type: string }, values: {} }, required: [name, providerKey] }
    CredentialUpdate: { type: object, properties: { name: { type: string }, providerKey: { type: string }, values: {} } }
    Flow: { type: object, properties: { id: { type: string }, name: { type: string }, status: { type: string, enum: [draft,test,production] }, enabled: { type: boolean }, graph: {} } }
    FlowCreate: { type: object, properties: { name: { type: string }, status: { type: string }, enabled: { type: boolean }, graph: {}, force: { type: boolean } }, required: [name] }
    FlowUpdate: { type: object, properties: { name: { type: string }, status: { type: string }, enabled: { type: boolean }, graph: {}, force: { type: boolean } } }
    Run: { type: object, properties: { id: { type: string }, flowId: { type: string }, workspaceId: { type: string }, companyId: { type: string }, status: { type: string }, events: { type: array, items: {} }, result: {} } }
    Notification: { type: object, properties: { id: { type: string }, entityType: { type: string }, entityId: { type: string }, severity: { type: string }, code: { type: string }, message: { type: string }, link: { type: string }, acknowledged: { type: boolean } } }
    TransferRequest:
      type: object
      properties:
        targetWorkspaceId: { type: string }
        force: { type: boolean }
        items:
          type: array
          items: { type: object, properties: { type: { type: string, enum: [flow,credential,app] }, id: { type: string } }, required: [type,id] }
      required: [targetWorkspaceId, items]
    Manifest:
      type: object
      properties:
        providers: { type: array, items: { type: object, properties: { key: { type: string }, name: { type: string }, categories: { type: array, items: { type: string } }, enabled: { type: boolean } } } }
        nodeTemplates: { type: array, items: { $ref: '#/components/schemas/NodeTemplate' } }
  responses:
    Error: { description: Error envelope, content: { application/json: { schema: { $ref: '#/components/schemas/ApiError' } } } }

paths:
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, properties: { email: { type: string }, password: { type: string } }, required: [email, password] } } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { allOf: [ { $ref: '#/components/schemas/ApiOk' }, { type: object, properties: { data: { type: object, properties: { token: { type: string }, user: { type: object }, company: { $ref: '#/components/schemas/Company' } } } } } ] } } } }
        '401': { $ref: '#/components/responses/Error' }

  /api/company:
    get:
      summary: Get current company
      responses: { '200': { description: OK, content: { application/json: { schema: { allOf: [ { $ref: '#/components/schemas/ApiOk' }, { type: object, properties: { data: { $ref: '#/components/schemas/Company' } } } ] } } } } }

  /api/workspaces:
    get:
      summary: List workspaces for current user
      responses: { '200': { description: OK, content: { application/json: { schema: { allOf: [ { $ref: '#/components/schemas/ApiOk' }, { type: object, properties: { data: { type: array, items: { $ref: '#/components/schemas/Workspace' } } } } ] } } } } }
  /api/workspaces/{wsId}:
    put:
      summary: Update workspace (force policy)
      parameters: [ { in: path, name: wsId, required: true, schema: { type: string } } ]
      requestBody: { content: { application/json: { schema: { type: object, properties: { name: { type: string }, templatesAllowed: { type: array, items: { type: string } }, force: { type: boolean } } } } } }
      responses: { '200': { $ref: '#/components/responses/Error' } }

  /api/providers:
    get: { summary: List providers, responses: { '200': { description: OK, content: { application/json: { schema: { allOf: [ { $ref: '#/components/schemas/ApiOk' }, { type: object, properties: { data: { type: array, items: { $ref: '#/components/schemas/Provider' } } } } ] } } } } } }
  /api/providers/{key}:
    put:
      summary: Update provider
      parameters: [ { in: path, name: key, required: true, schema: { type: string } } ]
      requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/Provider' } } } }
      responses: { '200': { $ref: '#/components/responses/Error' } }

  /api/node-templates:
    get: { summary: List node templates, responses: { '200': { $ref: '#/components/responses/Error' } } }
    post:
      summary: Create node template
      requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/NodeTemplate' } } } }
      responses: { '201': { $ref: '#/components/responses/Error' } }
  /api/node-templates/{key}:
    put:
      summary: Update node template (force)
      parameters: [ { in: path, name: key, required: true, schema: { type: string } } ]
      requestBody: { content: { application/json: { schema: { allOf: [ { $ref: '#/components/schemas/NodeTemplate' }, { type: object, properties: { force: { type: boolean } } } ] } } } }
      responses: { '200': { $ref: '#/components/responses/Error' }, '400': { $ref: '#/components/responses/Error' } }

  /api/workspaces/{wsId}/apps:
    get: { summary: List apps, parameters: [ { in: path, name: wsId, required: true, schema: { type: string } } ], responses: { '200': { $ref: '#/components/responses/Error' } } }
    post: { summary: Create app, requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/App' } } } }, responses: { '201': { $ref: '#/components/responses/Error' } } }
  /api/apps/{id}:
    put: { summary: Update app, parameters: [ { in: path, name: id, required: true, schema: { type: string } } ], requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/App' } } } }, responses: { '200': { $ref: '#/components/responses/Error' } } }

  /api/workspaces/{wsId}/credentials:
    get: { summary: List credentials, parameters: [ { in: path, name: wsId, required: true, schema: { type: string } } ], responses: { '200': { $ref: '#/components/responses/Error' } } }
    post: { summary: Create credential, requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/CredentialCreate' } } } }, responses: { '201': { $ref: '#/components/responses/Error' } } }
  /api/credentials/{id}:
    get: { summary: Get credential summary, parameters: [ { in: path, name: id, required: true, schema: { type: string } } ], responses: { '200': { $ref: '#/components/responses/Error' } } }
    put: { summary: Update credential, requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/CredentialUpdate' } } } }, responses: { '200': { $ref: '#/components/responses/Error' } } }
  /api/credentials/{id}/values:
    get:
      summary: Read credential values (masked by default; reveal=1 requires admin)
      parameters: [ { in: path, name: id, required: true, schema: { type: string } }, { in: query, name: reveal, schema: { type: string, enum: ['0','1'] } } ]
      responses: { '200': { $ref: '#/components/responses/Error' } }

  /api/workspaces/{wsId}/flows:
    get: { summary: List flows, parameters: [ { in: path, name: wsId, required: true, schema: { type: string } } ], responses: { '200': { $ref: '#/components/responses/Error' } } }
    post: { summary: Create flow (force), requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/FlowCreate' } } } }, responses: { '201': { $ref: '#/components/responses/Error' }, '400': { $ref: '#/components/responses/Error' } } }
  /api/flows/{flowId}:
    get: { summary: Get flow, parameters: [ { in: path, name: flowId, required: true, schema: { type: string } }, { in: query, name: populate, schema: { type: string, enum: ['0','1'] } } ], responses: { '200': { $ref: '#/components/responses/Error' } } }
    put: { summary: Update flow (force), requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/FlowUpdate' } } } }, responses: { '200': { $ref: '#/components/responses/Error' }, '400': { $ref: '#/components/responses/Error' } } }

  /api/flows/{flowId}/runs:
    post: { summary: Start run, requestBody: { content: { application/json: { schema: { type: object, properties: { payload: {} } } } } }, responses: { '201': { $ref: '#/components/responses/Error' }, '409': { $ref: '#/components/responses/Error' } } }
  /api/runs/{runId}:
    get: { summary: Get run, parameters: [ { in: path, name: runId, required: true, schema: { type: string } }, { in: query, name: populate, schema: { type: string, enum: ['0','1'] } } ], responses: { '200': { $ref: '#/components/responses/Error' } } }
  /api/runs/{runId}/stream:
    get: { summary: SSE run events, responses: { '200': { description: SSE Stream } } }

  /api/notifications:
    get: { summary: List notifications, parameters: [ { in: query, name: workspaceId, schema: { type: string } }, { in: query, name: entityType, schema: { type: string } }, { in: query, name: acknowledged, schema: { type: string, enum: ['true','false'] } } ], responses: { '200': { $ref: '#/components/responses/Error' } } }
  /api/notifications/{id}/ack:
    post: { summary: Ack notification, parameters: [ { in: path, name: id, required: true, schema: { type: string } } ], responses: { '200': { $ref: '#/components/responses/Error' } } }

  /api/workspaces/{wsId}/transfer:
    post: { summary: Transfer/duplicate items, requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/TransferRequest' } } } }, responses: { '200': { $ref: '#/components/responses/Error' } } }

  /api/plugins:
    get: { summary: List plugins, responses: { '200': { $ref: '#/components/responses/Error' } } }
  /api/plugins/reload:
    post: { summary: Reload plugins, responses: { '200': { $ref: '#/components/responses/Error' } } }
  /api/plugins/import-manifest:
    post: { summary: Import manifest, requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/Manifest' } } } }, responses: { '200': { $ref: '#/components/responses/Error' } } }
